{"version":3,"file":"dev-console-products.js","sourceRoot":"","sources":["../src/components/dev-console-products.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEF,OAAO,EAAC,UAAU,EAAE,IAAI,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD;;;;GAIG;AAEH,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,UAAU;IACrC,MAAM;QACX,OAAO,IAAI,CAAA;;;;kBAIF,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACvB,IAAI,CAAA;oCACY,OAAO,CAAC,SAAS,iCAAiC,GAAE,EAAE,CAAA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC;0BACvG,OAAO,CAAC,GAAG;0BACX,OAAO,CAAC,IAAI;;qBAEjB,CACJ;;;UAGP,CAAA;IACL,CAAC;IAEO,eAAe,CAAC,SAAgB;QACrC,IAAI,SAAS,EAAE;YACb,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,EAAC,SAAS,EAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;aACf,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC;SAC/D;IACH,CAAC;CAEL,CAAA;AA9BY,kBAAkB;IAD9B,aAAa,CAAC,sBAAsB,CAAC;GACzB,kBAAkB,CA8B9B;SA9BY,kBAAkB","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n import {LitElement, html} from 'lit';\n import {customElement} from 'lit/decorators.js';\n import { products } from '../staticData/products';\n /**\n  * @fires count-changed - Indicates when the count changes\n  * @slot - This element has a slot\n  * @csspart button - The button\n  */\n @customElement('dev-console-products')\n export class DevConsoleProducts extends LitElement {\n     override render(){\n         return html`\n            <div class=\"products-container\">\n                <strong>Browse Products</strong>\n                <ul class=\"products-list-container\">\n                ${products.map((product) =>\n                    html`\n                        <li value=${product.uniqueKey} class=\"products-item\" @click=${()=>this._dispatchSelect(product.uniqueKey)}>\n                        ${product.svg}    \n                        ${product.name}\n                        </li>\n                    `\n                )}\n                </ul>\n            </div>\n         `\n     }\n\n     private _dispatchSelect(uniqueKey:string) {\n        if (uniqueKey) {\n          const options = {\n            detail: {uniqueKey},\n            bubbles: true,\n            composed: true\n          };\n          this.dispatchEvent(new CustomEvent('productSelect', options));\n        }\n      }\n    \n }\n\n declare global {\n    interface HTMLElementTagNameMap {\n      'dev-console-products': DevConsoleProducts;\n    }\n  }"]}